{"ast":null,"code":"var _jsxFileName = \"/home/bruce/Projects/github/tictactoe/frontend/src/Canvas.js\";\nimport React, { Component } from 'react';\nimport { Engine, Scene } from 'babylonjs';\nexport default class Canvas extends Component {\n  constructor({\n    sceneDidMount,\n    engineOptions,\n    adaptToDeviceRatio\n  }) {\n    super();\n\n    this.onResizeWindow = () => {\n      const engine = this.engine;\n      if (engine) engine.resize();\n    };\n\n    this.onCanvasLoaded = c => {\n      if (c) this.canvas = c;\n    };\n\n    this.scene = null;\n    this.engine = null;\n    this.canvas = null;\n    this.sceneDidMount = sceneDidMount;\n    this.engineOptions = engineOptions;\n    this.adaptToDeviceRatio = adaptToDeviceRatio;\n  }\n\n  componentDidMount() {\n    let scene = this.scene,\n        sceneDidMount = this.sceneDidMount,\n        canvas = this.canvas,\n        engine = this.engine,\n        engineOptions = this.engineOptions,\n        adaptToDeviceRatio = this.adaptToDeviceRatio;\n\n    if (typeof sceneDidMount !== 'function') {\n      console.error('sceneDidMount function not available');\n      return null;\n    }\n\n    engine = new Engine(canvas, true, engineOptions, adaptToDeviceRatio);\n    scene = new Scene(engine);\n    sceneDidMount({\n      scene,\n      engine,\n      canvas\n    }); // Resize the babylon engine when the window is resized\n\n    window.addEventListener('resize', this.onResizeWindow);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.onResizeWindow);\n  }\n\n  render() {\n    // 'rest' can contain additional properties that you can flow through to canvas:\n    // (id, className, etc.)\n    let _this$props = this.props,\n        width = _this$props.width,\n        height = _this$props.height;\n    let opts = {};\n\n    if (width !== undefined && height !== undefined) {\n      opts.width = '100%';\n      opts.height = '100%';\n    }\n\n    return React.createElement(\"canvas\", Object.assign({\n      id: \"renderCanvas\"\n    }, opts, {\n      ref: this.onCanvasLoaded,\n      \"touch-action\": \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/bruce/Projects/github/tictactoe/frontend/src/Canvas.js"],"names":["React","Component","Engine","Scene","Canvas","constructor","sceneDidMount","engineOptions","adaptToDeviceRatio","onResizeWindow","engine","resize","onCanvasLoaded","c","canvas","scene","componentDidMount","console","error","window","addEventListener","componentWillUnmount","removeEventListener","render","props","width","height","opts","undefined"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,WAA9B;AAEA,eAAe,MAAMC,MAAN,SAAqBH,SAArB,CAA+B;AAC1CI,EAAAA,WAAW,CAAC;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,aAAjB;AAAgCC,IAAAA;AAAhC,GAAD,EAAuD;AAC9D;;AAD8D,SAWlEC,cAXkE,GAWjD,MAAM;AAAA,YACXC,MADW,GACA,IADA,CACXA,MADW;AAEnB,UAAIA,MAAJ,EAAYA,MAAM,CAACC,MAAP;AACf,KAdiE;;AAAA,SA2ClEC,cA3CkE,GA2CjDC,CAAC,IAAI;AAClB,UAAIA,CAAJ,EAAO,KAAKC,MAAL,GAAcD,CAAd;AACV,KA7CiE;;AAE9D,SAAKE,KAAL,GAAa,IAAb;AACA,SAAKL,MAAL,GAAc,IAAd;AACA,SAAKI,MAAL,GAAc,IAAd;AAEA,SAAKR,aAAL,GAAqBA,aAArB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACH;;AAODQ,EAAAA,iBAAiB,GAAG;AAAA,QAEZD,KAFY,GAQZ,IARY,CAEZA,KAFY;AAAA,QAGZT,aAHY,GAQZ,IARY,CAGZA,aAHY;AAAA,QAIZQ,MAJY,GAQZ,IARY,CAIZA,MAJY;AAAA,QAKZJ,MALY,GAQZ,IARY,CAKZA,MALY;AAAA,QAMZH,aANY,GAQZ,IARY,CAMZA,aANY;AAAA,QAOZC,kBAPY,GAQZ,IARY,CAOZA,kBAPY;;AAUhB,QAAI,OAAOF,aAAP,KAAyB,UAA7B,EAAyC;AACrCW,MAAAA,OAAO,CAACC,KAAR,CAAc,sCAAd;AACA,aAAO,IAAP;AACH;;AAEDR,IAAAA,MAAM,GAAG,IAAIR,MAAJ,CAAWY,MAAX,EAAmB,IAAnB,EAAyBP,aAAzB,EAAwCC,kBAAxC,CAAT;AACAO,IAAAA,KAAK,GAAG,IAAIZ,KAAJ,CAAUO,MAAV,CAAR;AACAJ,IAAAA,aAAa,CAAC;AAAES,MAAAA,KAAF;AAASL,MAAAA,MAAT;AAAiBI,MAAAA;AAAjB,KAAD,CAAb,CAjBgB,CAmBhB;;AACAK,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKX,cAAvC;AACH;;AAEDY,EAAAA,oBAAoB,GAAG;AACnBF,IAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqC,KAAKb,cAA1C;AACH;;AAMDc,EAAAA,MAAM,GAAG;AACL;AACA;AAFK,sBAGmB,KAAKC,KAHxB;AAAA,QAGCC,KAHD,eAGCA,KAHD;AAAA,QAGQC,MAHR,eAGQA,MAHR;AAIL,QAAIC,IAAI,GAAG,EAAX;;AAEA,QAAIF,KAAK,KAAKG,SAAV,IAAuBF,MAAM,KAAKE,SAAtC,EAAiD;AAC7CD,MAAAA,IAAI,CAACF,KAAL,GAAa,MAAb;AACAE,MAAAA,IAAI,CAACD,MAAL,GAAc,MAAd;AACH;;AAED,WACI;AACI,MAAA,EAAE,EAAC;AADP,OAEQC,IAFR;AAGI,MAAA,GAAG,EAAE,KAAKf,cAHd;AAII,sBAAa,MAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ;AAQH;;AAnEyC","sourcesContent":["import React, { Component } from 'react';\nimport { Engine, Scene } from 'babylonjs';\n\nexport default class Canvas extends Component {\n    constructor({ sceneDidMount, engineOptions, adaptToDeviceRatio }) {\n        super();\n        this.scene = null;\n        this.engine = null;\n        this.canvas = null;\n\n        this.sceneDidMount = sceneDidMount;\n        this.engineOptions = engineOptions;\n        this.adaptToDeviceRatio = adaptToDeviceRatio;\n    }\n\n    onResizeWindow = () => {\n        const { engine } = this;\n        if (engine) engine.resize();\n    };\n\n    componentDidMount() {\n        let {\n            scene,\n            sceneDidMount,\n            canvas,\n            engine,\n            engineOptions,\n            adaptToDeviceRatio,\n        } = this;\n\n        if (typeof sceneDidMount !== 'function') {\n            console.error('sceneDidMount function not available');\n            return null;\n        }\n\n        engine = new Engine(canvas, true, engineOptions, adaptToDeviceRatio);\n        scene = new Scene(engine);\n        sceneDidMount({ scene, engine, canvas });\n\n        // Resize the babylon engine when the window is resized\n        window.addEventListener('resize', this.onResizeWindow);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.onResizeWindow);\n    }\n\n    onCanvasLoaded = c => {\n        if (c) this.canvas = c;\n    };\n\n    render() {\n        // 'rest' can contain additional properties that you can flow through to canvas:\n        // (id, className, etc.)\n        let { width, height } = this.props;\n        let opts = {};\n\n        if (width !== undefined && height !== undefined) {\n            opts.width = '100%';\n            opts.height = '100%';\n        }\n\n        return (\n            <canvas\n                id=\"renderCanvas\"\n                {...opts}\n                ref={this.onCanvasLoaded}\n                touch-action=\"none\"\n            />\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}