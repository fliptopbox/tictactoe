{"version":3,"sources":["Canvas.js","utilities.js","hexToRGB.js","materials.js","orbitCamera.js","createCamera.js","createLight.js","terrain.js","createWorld.js","getMatrix.js","showAxis.js","getRotationProperties.js","pointerEvents.js","rotatePlane.js","calculateScore.js","explodeMatrix.js","radialLineCluster.js","createCoreMesh.js","gameState.js","getRandomRotation.js","Player.js","bad-guys.js","createPlayer.js","Settings.js","GameOver.js","HexSwatches.js","CurrentPlayer.js","Introduction.js","Status.js","Scene.js","App.js","index.js"],"names":["Canvas","sceneDidMount","engineOptions","adaptToDeviceRatio","onResizeWindow","engine","resize","onCanvasLoaded","c","canvas","scene","this","console","error","Engine","Scene","window","addEventListener","removeEventListener","opts","props","id","ref","touch-action","Component","rnd","max","min","float","n","Math","random","round","timeline","duration","fn","frameRate","frames","fps","i","setTimeout","Number","uidserial","hexToRGB","hex","factor","array","replace","toLowerCase","length","split","filter","v","map","s","slice","matlib","core","diffuseColor","emissiveColor","ambientColor","visibility","wireframe","ground","solid","Color3","wire","red","textColor","black","white","grey","surface","materials","text","m","StandardMaterial","color","test","log","dynTex","DynamicTexture","width","height","diffuseTexture","drawText","uOffset","vOffset","Object","keys","forEach","k","value","rgb","r","g","b","hexColor","orbitCamera","camera","inc","orbit","timer","step","helper","direction","undefined","clearTimeout","createCamera","that","radius","state","ArcRotateCamera","fov","setTarget","Vector3","start","ms","setState","showIntro","attachControl","attach","diameter","distance","alpha","beta","end","percent","createLight","light","type","name","intensity","vector","target","HemisphericLight","groundColor","PointLight","greens","teals","browns","green","teal","brown","hsl","push","getTerrain","cube","axis","mesh","coord","x","y","z","join","natural","axises","getNaturalColor","toHexString","mat","material","CORNER","DOUBLE","SINGLE","INTERNAL","createWorld","columns","squared","totalcubes","offset","matrix","Array","_","abs","ax","ay","az","setTerrain","owner","metadata","getMatrix","CreateBox","MeshBuilder","meshes","dispose","planet","size","initialSize","position","isCore","showAxis","Mesh","CreateLines","Zero","makeTextPlane","dynamicTexture","hasAlpha","plane","CreatePlane","backFaceCulling","specularColor","getRotationProperties","object","dest","rotation","amount","extent","values","normal","nX","nY","nZ","findIndex","nValue","some","warn","clockwise","mX","mY","mZ","normalAxis","destAxis","destValue","onRelease","selected","down","movement","POINTERTAP","PointerEventTypes","POINTERPICK","POINTERDOWN","POINTERUP","POINTERMOVE","POINTERDOUBLETAP","pointerEvents","e","pickInfo","pickedMesh","event","movementX","movementY","detachControl","absolutePosition","getNormal","rotate","occupy","rotatePlane","rotations","rotationFrames","pivot","origin","CreateSphere","segments","createPivot","collection","child","setParent","anim","Animation","ANIMATIONTYPE_FLOAT","ANIMATIONLOOPMODE_CONSTANT","easing","BezierCurveEase","frame","PI","setEasingFunction","setKeys","beginDirectAnimation","updated","parent","setAbsolutePosition","positions","getVerticesData","VertexBuffer","PositionKind","normals","NormalKind","VertexData","ComputeNormals","getIndices","setVerticesData","updateCubePositions","getOwner","getLattice","iterations","facet","re","getFilter","reduce","acc","getScore","playerId","String","getRadiusFromMatix","dataset","faces","row","getFaceArray","RegExp","xyz","dimensions","rows","cols","diags","getDiagonals","occupied","concat","subtotal","remainder","sets","set","a","dominance","types","every","bool","stats","finished","total","rank","runningTotal","current","player","accumulated","sort","scoreCard","leader","apply","condition","negate","sqr","empty","index","explodeMatrix","score","earth","multiplier","players","p","winner","displace","time","BezierEasing","steps","pos","absValue","lastFloat","percentToAbsolute","done","floatNormal","translate","Space","WORLD","spin","registerBeforeRender","rotationLoop","LOCAL","animationStack","radialLineCluster","sphere","CreateIcoSphere","pointsMaterial","pointsCloud","pointSize","pointCloud","createCoreMesh","godrays","VolumetricLightScatteringPostProcess","Texture","BILINEAR_SAMPLINGMODE","useDiffuseColor","godRadiation","gameState","context","save","bind","load","key","json","o","shallow","localStorage","JSON","stringify","parse","emulate","call","generateScene","ts","Date","valueOf","getRandomRotation","Player","alias","twist","style","background","classname","showAlias","className","serialno","history","materialKeys","createPlayer","human","ns","int","toString","uuid","getNextMaterial","spiecies","getRandomName","past","antagonist","names","indexOf","Settings","saveSettings","handleSave","opponents","settings","handleNons","ishuman","nonhuman","handleRadius","handleRadiusChange","updateEarth","handlePlayers","updatePlayername","showSettings","playerslist","user","PlayerName","handler","Range","label","handleChange","onClick","React","defaultValue","onInput","onChange","css","placeholder","GameOver","handleRestart","topscore","count","getResults","item","tie","HexSwatches","hexes","bgcolor","CurrentPlayer","inProgress","src","alt","Introduction","Status","executeNonHumanPlayer","playDelay","currentPlayer","willTwist","totalDelay","maxAmount","toggleToNextPlayer","toggleOnDoubleTap","nextPlayer","twistsPerPlay","showCubeCoords","alert","playerMaterial","scaleUpBy","hash","scaling","updateScore","next","saveAndStart","focusOnOccupy","getCurrentPlayer","obj","restart","runRenderLoop","render","showSceneAxis","clearColor","onPointerObservable","add","ready","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2a243117.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Engine,\n    Scene,\n} from 'babylonjs';\n\nexport default class Canvas extends Component {\n    constructor({ sceneDidMount, engineOptions, adaptToDeviceRatio }) {\n        super();\n        this.scene = null;\n        this.engine = null;\n        this.canvas = null;\n\n        this.sceneDidMount = sceneDidMount;\n        this.engineOptions = engineOptions;\n        this.adaptToDeviceRatio = adaptToDeviceRatio;\n    }\n\n    onResizeWindow = () => {\n        const { engine } = this;\n        if (engine) engine.resize();\n    };\n\n    componentDidMount() {\n        let {\n            scene,\n            sceneDidMount,\n            canvas,\n            engine,\n            engineOptions,\n            adaptToDeviceRatio\n        } = this;\n\n        if (typeof sceneDidMount !== 'function') {\n            console.error('sceneDidMount function not available');\n            return null;\n        }\n\n        engine = new Engine(canvas, true, engineOptions, adaptToDeviceRatio);\n        scene = new Scene(engine);\n        sceneDidMount({ scene, engine, canvas });\n\n        // Resize the babylon engine when the window is resized\n        window.addEventListener('resize', this.onResizeWindow);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.onResizeWindow);\n    }\n\n    onCanvasLoaded = c => {\n        if (c) this.canvas = c;\n    };\n\n    render() {\n        // 'rest' can contain additional properties that you can flow through to canvas:\n        // (id, className, etc.)\n        let opts = { ...this.props.opts };\n\n        return (\n            <canvas\n                id=\"renderCanvas\"\n                {...opts}\n                ref={this.onCanvasLoaded}\n                touch-action=\"none\"\n            />\n        );\n    }\n}\n","import BezierEasing from 'bezier-easing';\n\nexport { padd };\n function padd(string, len = 8) {\n     return String(` ${string}      `).slice(0, len);\n }\n\nexport { rnd };\nfunction rnd(max = 1, min = 0, float = true) {\n    let n = Math.random() * (max - min) + min;\n    if (!float && max === 1 && min === 0) n = Math.round(n);\n    return float ? n : n >> 0;\n}\n\nexport { timeline };\nfunction timeline(duration, fn, frameRate = 60) {\n    const seconds = duration / 1000;\n    const frames = frameRate * seconds;\n    const fps = 1000 / frameRate;\n\n    for (let i = 0; i <= frames; i += 1) {\n        setTimeout(function() {\n            return !fn ? null : fn(Number(i / frames), i);\n        }, i * fps);\n    }\n}\n\n\nlet uidserial = 0;\nexport { uuid };\nfunction uuid(ns = \"x\") {\n  // temporary generator\n  const int = (Math.random() * 36) >> 0;\n  uidserial += 1;\n  return [\n    ns, //\n    //( serial % 36 ).toString(36),\n    ( uidserial % 36 ).toString(36),\n    int.toString(36),\n    Number(new Date().valueOf()).toString(36),\n  ].join(\"\");\n}\n\nconst easingCurves = {\n    ease: [0.25, 0.1, 0.25, 1],\n    linear: [0, 0, 1, 1],\n    'ease-in': [0.42, 0, 1, 1],\n    'ease-out': [0, 0, 0.58, 1],\n    'ease-in-out': [0.42, 0, 0.58, 1]\n};\nexport { easingCurves };\n\nexport { easing };\nfunction easing(key) {\n    const curve = easingCurves[key] || easingCurves['ease-out'];\n    return BezierEasing(...curve);\n}\n\nexport { percentToAbsolute };\nfunction percentToAbsolute() {\n    // translate value is scalar, convert the normal\n    // into positive (explode) or negative (implode) value\n\n    let lastFloat = 0;\n    return function(distance, percent) {\n        let value = 0;\n\n        value =\n            percent >= lastFloat\n                ? (value = percent * distance)\n                : distance * (distance * lastFloat * (percent - lastFloat));\n\n        // console.log(\n        //     padd(i),\n        //     padd(((distance * 1000) >> 0) / 1000),\n        //     padd(((lastFloat * 1000) >> 0) / 1000),\n        //     padd(((value * 1000) >> 0) / 1000),\n        //     padd(((percent * 1000) >> 0) / 1000)\n        // );\n\n        lastFloat = percent;\n        return value;\n    };\n}\n","export default hexToRGB;\nfunction hexToRGB(hex, float = true) {\n\n    if (!hex) return null;\n\n    const factor = float ? 255 : 1;\n\n    hex = hex.replace(/^0x+/, \"\");\n    hex = hex.replace(/[^0-9a-f]+/gi, \"\");\n    hex = hex.toLowerCase();\n\n    let array = hex.length < 6\n            ? hex.split(/([0-9a-f]{1})/i)\n            : hex.split(/([0-9a-f]{2})/i);\n\n    // remove empty registers\n    array = array.filter(v => v.length);\n\n    // convert to Bytes or Floating point normal\n    array = array\n        .map(v => (v.length - 1 ? `0x${v}` : `0x${v}${v}`))\n        .map(s => Number(s) / factor)\n        .slice(0, 3);\n\n    return array;\n}\n","import { DynamicTexture, StandardMaterial, Color3 } from 'babylonjs';\nimport hexToRGB from './hexToRGB';\n\nconst matlib = {\n    core: {\n        diffuseColor: '#ff0000',\n        emissiveColor: '#550000',\n        ambientColor: '#000000',\n        visibility: 0.3,\n        wireframe: true\n        // specularColor: new Color3(0.5, 0.6, 0.87),\n        // emissiveColor: new Color3(0, 0, 0),\n        // ambientColor: new Color3(0.23, 0.98, 0.53)\n    },\n    ground: {\n        diffuseColor: \"#222222\"\n    },\n    solid: {\n        diffuseColor: new Color3(1, 0, 1)\n        // specularColor: new Color3(0.5, 0.6, 0.87),\n        // emissiveColor: new Color3(0, 0, 0),\n        // ambientColor: new Color3(0.23, 0.98, 0.53)\n    },\n    wire: {\n        diffuseColor: new Color3(1, 0, 1),\n        // specularColor: new Color3(0.5, 0.6, 0.87),\n        // emissiveColor: new Color3(0, 0, 0),\n        // ambientColor: new Color3(0.23, 0.98, 0.53),\n        wireframe: true\n    },\n    red: {\n        diffuseColor: '#ee0000',\n        ambientColor: '#000011',\n        emissiveColor: '#111111',\n        textColor: '#000000',\n        wireframe: false\n    },\n    black: {\n        diffuseColor: '#121212',\n        emissiveColor: '#000000',\n        textColor: '#ffffff',\n        wireframe: false\n    },\n    white: {\n        diffuseColor: '#dfdfdf',\n        textColor: '#000000',\n        wireframe: false\n    },\n    grey: {\n        diffuseColor: '#7c7c7c',\n        textColor: '#000000',\n        wireframe: false\n    },\n    surface: {\n        diffuseColor: new Color3(0, 0, 0),\n        // specularColor: new Color3(0, 0, 0),\n        emissiveColor: new Color3(0, 0, 0),\n        // ambientColor: new Color3(0, 0, 0),\n        wireframe: true\n    }\n};\n\nexport default materials;\nfunction materials({ scene }) {\n    return function(id, text) {\n        if (!matlib[id]) return null;\n\n        let m = new StandardMaterial(id, scene);\n        const props = matlib[id];\n        const font = 'bold 20px Arial';\n        const color = /white/i.test(id) ? 'black' : 'white';\n\n        if (text) {\n            console.log('dyn', text);\n            let dynTex = new DynamicTexture(\n                'dtex',\n                { width: 150, height: 150 },\n                scene,\n                true\n            );\n\n            m.diffuseTexture = dynTex;\n            dynTex.drawText(\n                text,\n                10,\n                40,\n                font,\n                color,\n                props.diffuseColor,\n                true,\n                true\n            );\n\n            m.diffuseTexture.uOffset = 0;\n            m.diffuseTexture.vOffset = 0;\n        }\n\n        Object.keys(props).forEach(k => {\n            let value = props[k];\n            let hex = /^#[0-9a-f]{3,6}$/i.test(value || '');\n            let rgb = hex ? hexToRGB(value) : null;\n            let [r, g, b] = rgb || [];\n\n            // add the hexColor to mesh.material properties\n            if (k === 'diffuseColor' ) m.hexColor = value;\n\n            // convert hex string into Color3\n            value = rgb ? new Color3(r, g, b) : value;\n\n            // skip dynTexture cube w. diffuseColor\n            if (k === 'diffuseColor' && text) return;\n\n            m[k] = value;\n        });\n        return m;\n    };\n}\n","\nexport default orbitCamera;\nfunction orbitCamera(camera, inc = 3, orbit = \"alpha\") {\n\n    let timer = null;\n    let step = inc / 1000;\n\n    orbit = /^(alpha|beta)$/i.test(orbit) ? orbit : \"alpha\";\n    orbit = orbit.toLowerCase();\n\n    const helper = function(direction = null) {\n        // direction: -1 negative, 0 stop, 1 positive\n        if(direction === undefined || direction === null) {\n            return timer !== null; // true = is running\n        }\n\n        if (direction === 0) {\n            clearTimeout(timer);\n            timer = null;\n            return;\n        }\n\n\n        camera[orbit] += step * direction;\n        timer = setTimeout(() => helper(direction ), 50);\n    };\n\n    return helper;\n}","import { timeline } from \"./utilities\";\nimport { Vector3, ArcRotateCamera } from \"babylonjs\";\nimport orbitCamera from \"./orbitCamera\";\n\nexport default createCamera;\nfunction createCamera({ scene, canvas }, that) {\n    const matrixRadius = that.state.radius;\n    const radius = matrixRadius * 1.2; // 1.276;\n    let camera = new ArcRotateCamera(\n        \"Camera\",\n        0.45539, // Math.PI / 2, // camera.alpha (horz)\n        4.164, //Math.PI / 2, // camera.beta (vertical)\n        radius, // 2.076, // radius, // camera.radius\n        null, // new Vector3(2.5, 1.5, 0),\n        scene\n    );\n\n    \n\n    camera.fov = 1.2;\n    camera.setTarget(new Vector3(0, -1, 0));\n    // camera.attachControl(canvas, true);\n    //\n    const orbit = orbitCamera(camera);\n    orbit(1);\n\n\n\n    window.camera = {\n        camera,\n        start: (ms = 2000) => {\n            if (orbit()) orbit(0);\n            that.setState({showIntro: false});\n            start(camera, ms, that.state.radius);\n            camera.attachControl(canvas, true);\n        },\n        orbit,\n        attach: camera.attachControl(canvas, true)\n    };\n    return camera;\n}\n\n\nfunction start(camera, ms = 2000, matrixRadius) {\n    const diameter = matrixRadius + 2;\n    const distance = diameter + (diameter / 2);\n    const { alpha, beta, radius, fov } = camera;\n    const end = { beta: 1, alpha: 7.2, radius: distance, fov: 1.5 };\n\n    timeline(ms * 1.05, function(percent) {\n        camera.beta = beta + percent * (end.beta - beta);\n        camera.alpha = alpha + percent * (end.alpha - alpha);\n    });\n\n    timeline(ms, function(percent) {\n        camera.radius = radius + percent * (end.radius - radius);\n        camera.fov = fov + percent * (end.fov - fov);\n    });\n}\n","import { HemisphericLight, PointLight, Vector3, Color3 } from 'babylonjs';\n\nexport default createLight;\nfunction createLight(\n    { scene },\n    type = 'hemi',\n    name = 'light',\n    intensity,\n    vector = [0.5, 0.5, 0.5],\n    ground = [0.5, 0.5, 0.5]\n) {\n    // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n    let light;\n    const target = new Vector3(...vector);\n\n    switch (type) {\n        case 'hemi':\n            light = new HemisphericLight(name, target, scene);\n            light.groundColor = new Color3(...ground);\n            break;\n\n        case 'point':\n        default:\n            light = new PointLight(name, target, scene);\n            break;\n    }\n\n    light.intensity = intensity;\n\n    return light;\n}\n","import { DynamicTexture, StandardMaterial, Color3 } from 'babylonjs';\nimport { hsl } from 'color-convert';\n\nimport hexToRGB from './hexToRGB';\n// import materials from './materials';\n\nexport { setTerrain };\nexport { getTerrain };\n\nlet greens = [];\nlet teals = [];\nlet browns = [];\n\n// generate natural tints (light to dark)\n// i = 100 white, i = 0 black)\nfor (let i = 65; i >= 25; i -= 5) {\n    let green, teal, brown;\n    green = '#' + hsl.hex(120, 45, i);\n    teal = '#' + hsl.hex(204, 60, i);\n    brown = '#' + hsl.hex(12, 40, i);\n\n    greens.push(hexToRGB(green));\n    teals.push(hexToRGB(teal));\n    browns.push(hexToRGB(brown));\n\n    console.log(\n        '%c GREEN %c TEAL %c BROWN',\n        `background: ${green}`,\n        `background: ${teal}`,\n        `background: ${brown}`,\n        i,\n        green,\n        teal,\n        brown, i - 25\n    );\n}\n\n// returns mesh with material of the terrain for a give cube\n// with respect to the player and type\n\n// face type: (no. of faces )\n// ----------------------------------------------\n// corner   (3)     x,y,z (maximum)\n// edge     (2)     eg. x,y or x,z\n// plane    (1)     single plane\n// core     (0)     internal instance\n\n// const types = ['core', 'plane', 'edge', 'corner'];\n// const diffuseColors = ['#ff0000', '#00ff00', '#0000ff', '#fefefe'];\n// let mat = null;\n\nfunction getTerrain(cube, { scene }) {\n    const dev = false;\n    const { type, axis, mesh, id } = cube;\n    const coord = [cube.x, cube.y, cube.z].join(',');\n    const label = `${id}(${coord})${axis ? '#' : ''}`;\n\n    let [r, g, b] = getNaturalColor(type, axis);\n    const hex = new Color3(r,g,b).toHexString();\n\n    let mat = new StandardMaterial(id, scene);\n    if (!dev) {\n        mat.diffuseColor = new Color3(r, g, b);\n    } else {\n        mat = getDynamicTexture(scene, mat, hex, label);\n    }\n\n    mat.wireframe = false;\n    mesh.material = mat;\n    mesh.id = 'm' + id;\n    mesh.material.hexColor = hex;\n\n    return cube;\n}\n\n\n\nconst CORNER = 3;\nconst DOUBLE = 2;\nconst SINGLE = 1;\nconst INTERNAL = 0;\n\n\n\n\nfunction setTerrain(offset, x, y, z) {\n    // flag intenal instances\n    const core =\n        Math.abs(x) < offset && Math.abs(y) < offset && Math.abs(z) < offset;\n\n    const ax = Math.abs(x);\n    const ay = Math.abs(y);\n    const az = Math.abs(z);\n\n    let type = 0;\n    type = Number(ax + ay + az) === offset * CORNER ? CORNER : 0;\n    type = type ? type : Number(ax + ay) === offset * CORNER - offset && DOUBLE;\n    type = type ? type : Number(ax + az) === offset * CORNER - offset && DOUBLE;\n    type = type ? type : Number(ay + az) === offset * CORNER - offset && DOUBLE;\n    type = type ? type : SINGLE; // interior surfaces\n    type = core ? INTERNAL : type; // invisible\n\n    // flag XYZ axis - the polar plate on each face\n    let axis =\n        (ax === 0 || ay === 0 || az === 0) &&\n        ((ax === 0 && ay === 0 && az === offset) ||\n            (ay === 0 && az === 0 && ax === offset) ||\n            (az === 0 && ax === 0 && ay === offset));\n\n    return { type, axis };\n}\n\nfunction getNaturalColor(type, axis = false) {\n    // world central core\n    if (type === 0) {\n        return browns[(Math.random() * browns.length) >> 0];\n    }\n\n    const natural = [...greens.slice(0, -2), ...teals.slice(0, -2)];\n    const axises = [...greens.slice(-2), ...teals.slice(-2)];\n    const array = axis ? axises : natural;\n\n    return array[(Math.random() * array.length) >> 0];\n}\n\nfunction getDynamicTexture(scene, material, diffuseColor, text) {\n    const font = 'bold 16px Arial';\n    const color = \"white\";\n    const dynTex = new DynamicTexture(\n        'dtex',\n        { width: 150, height: 150 },\n        scene,\n        true\n    );\n\n    dynTex.drawText(text, 10, 40, font, color, diffuseColor, true, true);\n\n    material.diffuseTexture = dynTex;\n    material.diffuseTexture.uOffset = 0;\n    material.diffuseTexture.vOffset = 0;\n\n    return material;\n}\n","import { setTerrain } from \"./terrain\";\n\nexport default createWorld;\nfunction createWorld(radius = 1) {\n    const diameter = radius + 2; //?\n\n    const columns = diameter; //sizes[diameter] || sizes[0];\n    const squared = columns ** 2; // number of cells per face\n    const totalcubes = columns ** 3; // total number of cells\n    const offset = (diameter - 1) / 2; // offset to world origin (0,0,0)\n\n    let matrix = [...Array(totalcubes)].map((_, i) => {\n        // setup coordinates\n\n        let x = i % columns;\n        let y = ((i / columns) >> 0) % columns;\n        let z = ((i / squared) >> 0) % columns;\n\n        // ensure the matrix center is at scene origin\n        x = x + -(offset);\n        y = y + -(offset);\n        z = z + -(offset);\n\n        const { axis, type } = setTerrain((offset), x, y, z);\n        const owner = 0;\n        const obj = { id: i, x, y, z, type, axis, owner };\n        return obj;\n    });\n\n    // output the count of interal objects\n    // (the core of the planet)\n    // console.log('core', Object.keys(matrix).filter(k => matrix[k].type).length);\n\n    return {\n        matrix,\n        metadata: {\n            columns,\n            offset\n        }\n    };\n}","import { MeshBuilder, Vector3 } from 'babylonjs';\nimport createWorld from './createWorld';\nimport { getTerrain } from './terrain';\n\nexport default getMatrix;\nfunction getMatrix({ scene }, radius = 1) {\n    const { CreateBox } = MeshBuilder;\n\n    // dispose old earth mesh\n    let { meshes } = scene;\n    let initialSize = 0.85;\n\n    meshes\n        .filter(mesh => mesh && mesh.id && /^m[0-9]+$/.test(mesh.id))\n        .forEach(mesh => mesh.dispose());\n\n    let planet = createWorld(radius).matrix.map(cube => {\n        const { id, x, y, z, type } = cube;\n        const size = type ? initialSize : initialSize * 0.8;\n        const mesh = CreateBox(id, { size }, scene);\n        mesh.position = new Vector3(x, y, z);\n        mesh.id = 'm' + id;\n        mesh.isCore = type === 0;\n\n        return { ...cube, mesh };\n    });\n\n    planet.filter(c => !c.core).forEach(cube => getTerrain(cube, { scene }, 0));\n\n    return planet;\n}\n","import {\n    Mesh,\n    DynamicTexture,\n    StandardMaterial,\n    Color3,\n    Vector3\n} from 'babylonjs';\n\nexport default showAxis;\nfunction showAxis(size, scene, showAxis = false) {\n    if(!showAxis) return;\n    var axisX = Mesh.CreateLines(\n        'axisX',\n        [\n            new Vector3.Zero(),\n            new Vector3(size, 0, 0),\n            new Vector3(size * 0.95, 0.05 * size, 0),\n            new Vector3(size, 0, 0),\n            new Vector3(size * 0.95, -0.05 * size, 0)\n        ],\n        scene\n    );\n    axisX.color = new Color3(1, 0, 0);\n    var xChar = makeTextPlane(scene, 'X', 'red', size / 10);\n    xChar.position = new Vector3(0.9 * size, -0.05 * size, 0);\n    var axisY = Mesh.CreateLines(\n        'axisY',\n        [\n            new Vector3.Zero(),\n            new Vector3(0, size, 0),\n            new Vector3(-0.05 * size, size * 0.95, 0),\n            new Vector3(0, size, 0),\n            new Vector3(0.05 * size, size * 0.95, 0)\n        ],\n        scene\n    );\n    axisY.color = new Color3(0, 1, 0);\n    var yChar = makeTextPlane(scene, 'Y', 'green', size / 10);\n    yChar.position = new Vector3(0, 0.9 * size, -0.05 * size);\n    var axisZ = Mesh.CreateLines(\n        'axisZ',\n        [\n            new Vector3.Zero(),\n            new Vector3(0, 0, size),\n            new Vector3(0, -0.05 * size, size * 0.95),\n            new Vector3(0, 0, size),\n            new Vector3(0, 0.05 * size, size * 0.95)\n        ],\n        scene\n    );\n    axisZ.color = new Color3(0, 0, 1);\n    var zChar = makeTextPlane(scene, 'Z', 'blue', size / 10);\n    zChar.position = new Vector3(0, 0.05 * size, 0.9 * size);\n}\n\nfunction makeTextPlane(scene, text, color, size) {\n    var dynamicTexture = new DynamicTexture('DynamicTexture', 50, scene, true);\n    dynamicTexture.hasAlpha = true;\n    dynamicTexture.drawText(\n        text,\n        5,\n        40,\n        'bold 36px Arial',\n        color,\n        'transparent',\n        true\n    );\n    var plane = new Mesh.CreatePlane('TextPlane', size, scene, true);\n    plane.material = new StandardMaterial('TextPlaneMaterial', scene);\n    plane.material.backFaceCulling = false;\n    plane.material.specularColor = new Color3(0, 0, 0);\n    plane.material.diffuseTexture = dynamicTexture;\n    return plane;\n}\n","export default getRotationProperties;\nfunction getRotationProperties(object) {\n    // Input Mesh Objects -OR- {x,y,z} Literals\n    //\n    // object {mesh, dest, normal}\n    // ---------------------------\n    // mesh         Object      mouse down object (origin)\n    // dest         Object      mouse up object (destingation)\n    // normal       Object      face normal coords\n    //\n    // returns Object {rotation, amount, extent}\n    // -----------------------------------------\n    // rotation:    String      the axis of rotation (x,y,z)\n    // amount:      Integer     the number of revolutions (signed vector)\n    // extent:      Integer     the col/row to affect (signed integer)\n\n    let dest = {...object.dest};\n    Object.keys(dest).forEach(k => (dest[k] = object.mesh[k] - object.dest[k]));\n    Object.keys(dest).forEach(k => (dest[k] !== 0 ? dest[k] : delete dest[k]));\n\n    // maximum revolutions for this player for this turn\n    const amountMax = 3;\n\n    let rotation;\n    let amount;\n    let extent;\n\n    const xyz = ['x', 'y', 'z'];\n\n    const [nX, nY, nZ] = Object.values(object.normal);\n    const normal = [nX, nY, nZ].findIndex(v => Math.abs(v));\n    const nValue = [nX, nY, nZ][normal];\n\n    if (!object.normal || ![nX, nY, nZ].some(b => b)) {\n        console.warn('no normals detected');\n        return null;\n    }\n\n    const [mX, mY, mZ] = Object.values(object.mesh);\n    let normalAxis = xyz[Math.abs(normal)];\n    let destAxis = Object.keys(dest)[0];\n    let destValue = Object.values(dest)[0];\n    let clockwise;\n\n    amount = Math.min(Math.abs(destValue), amountMax);\n\n    switch (normalAxis) {\n        case 'x':\n            rotation = destAxis === 'z' ? 'y' : 'z';\n            clockwise = nValue > 0 ? -1 : 1;\n\n            if (destAxis === 'y') {\n                extent = mZ;\n                clockwise *= destValue > 0 ? 1 : -1;\n            }\n\n            if (destAxis === 'z') {\n                extent = mY;\n                clockwise *= destValue > 0 ? -1 : 1;\n            }\n\n            amount *= clockwise;\n            break;\n\n        case 'y':\n            rotation = destAxis === 'z' ? 'x' : 'z';\n            clockwise = nValue > 0 ? 1 : -1;\n\n            if (destAxis === 'x') {\n                extent = mZ;\n                clockwise *= destValue > 0 ? 1 : -1;\n            }\n\n            if (destAxis === 'z') {\n                extent = mX;\n                clockwise *= destValue > 0 ? -1 : 1;\n            }\n\n            amount *= clockwise;\n            break;\n\n        case 'z':\n        default:\n            rotation = destAxis === 'y' ? 'x' : 'y';\n            clockwise = nValue > 0 ? 1 : -1;\n\n            if (destAxis === 'y') {\n                extent = mX;\n                clockwise *= destValue > 0 ? 1 : -1;\n            }\n\n            if (destAxis === 'x') {\n                extent = mY;\n                clockwise *= destValue > 0 ? -1 : 1;\n            }\n\n            amount *= clockwise;\n            break;\n    }\n\n    return {rotation, amount, extent};\n}\n","import { PointerEventTypes } from 'babylonjs';\nimport getRotationProperties from './getRotationProperties';\n\nlet down = false;\nlet movement = [0, 0];\nlet onRelease;\nlet selected;\n// let ts;\n\nconst {\n    POINTERTAP,\n    POINTERPICK,\n    POINTERDOWN,\n    POINTERUP,\n    POINTERMOVE,\n    POINTERDOUBLETAP\n} = PointerEventTypes;\n\nexport default pointerEvents;\nfunction pointerEvents(e) {\n    const { camera, canvas } = this;\n    const { type, pickInfo = null } = e;\n    const { pickedMesh = null } = pickInfo || {};\n    const { movementX, movementY } = e.event;\n\n    let props;\n\n    switch (type) {\n        case POINTERDOWN:\n            console.log(pickedMesh, pickInfo);\n            if (pickedMesh && pickedMesh.id && /^m/.test(pickedMesh.id) && pickedMesh && pickInfo) {\n                camera.detachControl(canvas);\n                down = true;\n\n                selected = {\n                    mesh: { ...pickedMesh.absolutePosition },\n                    normal: { ...pickInfo.getNormal() }\n                };\n            }\n            break;\n\n        case POINTERUP:\n            // rotation interaction\n            if (pickedMesh && onRelease) {\n                selected.dest = pickedMesh.absolutePosition;\n                // dispatch( rotate, rotationProperties);\n                props = getRotationProperties(selected);\n                this.rotate(props);\n            }\n\n            // re-attach arc camera\n            camera.attachControl(canvas, true);\n            onRelease = null;\n            movement = [0, 0];\n            selected = null;\n            down = false;\n\n            break;\n\n        case POINTERMOVE:\n            if (down) {\n                movement[0] += movementX;\n                movement[1] += movementY;\n\n                // if the mouse has moved more than 10px execute\n                // flag any onRelease checks to execute\n                onRelease = Math.abs(movement[0] + Math.abs(movement[1])) > 10;\n            }\n\n            break;\n\n        case POINTERPICK:\n        case POINTERTAP:\n            // console.log('pick/tap', type);\n            break;\n\n        case POINTERDOUBLETAP:\n            console.log('double click - auto occupy', type);\n            if(!/^m/.test(pickedMesh.id)) return;\n            this.occupy(pickedMesh.id);\n            break;\n\n        default:\n            console.log('dropthrough', type);\n            break;\n    }\n}\n","import {\n    BezierCurveEase,\n    VertexBuffer,\n    VertexData,\n    Animation,\n    Vector3,\n    MeshBuilder,\n    StandardMaterial\n} from 'babylonjs';\n// import updateNormals from './updateNormals';\n\nexport default rotatePlane;\nfunction rotatePlane(\n    scene,\n    matrix,\n    axis = 'y',\n    extent = 0,\n    rotations = 1,\n    rotationFrames = 100\n) {\n    if (!rotations || !/^[xyz]$/.test(axis)) return;\n\n    const speed = 0.3;\n    const direction = rotations > 0 ? 1 : -1;\n    const amount = [0.5, 1, 1.5, 2][(Math.abs(rotations) - 1) % 4];\n    const duration = (rotationFrames * speed) >> 0;\n    const pivot = createPivot(scene);\n\n    // console.log(\"extent\", extent);\n\n    let collection = matrix.filter(cube => {\n        const child = cube[axis] === extent;\n        if (child) cube.mesh.setParent(pivot);\n        return child;\n    });\n\n    const anim = new Animation(\n        'spin',\n        `rotation.${axis}`,\n        25,\n        Animation.ANIMATIONTYPE_FLOAT,\n        Animation.ANIMATIONLOOPMODE_CONSTANT\n    );\n\n    // https://cubic-bezier.com/#.13,.88,.82,1.12\n    const easing = new BezierCurveEase(.09, .46, .51, 1.09);\n\n    const frames = [\n        { frame: 0, value: 0 },\n        { frame: duration, value: Math.PI * amount * direction }\n    ];\n\n    const onAnimationEnd = () => {\n        collection = updateCubePositions(collection, matrix, scene);\n        pivot.dispose(true);\n    };\n\n    anim.setEasingFunction(easing)\n    anim.setKeys(frames);\n    scene.beginDirectAnimation(\n        pivot,\n        [anim],\n        0,\n        duration,\n        false,\n        1,\n        onAnimationEnd\n    );\n}\n\nfunction updateCubePositions(array, matrix) {\n    // after the animation, update the mesh positions to absolute coords\n    // and merge the new positions in the respective matrix reference\n\n    const updated = array.map(cube => {\n        const { absolutePosition } = cube.mesh;\n        let { x, y, z } = absolutePosition;\n        const { mesh } = cube;\n\n        // the matrix attributes\n        x = Math.round(absolutePosition.x * 2) / 2;\n        y = Math.round(absolutePosition.y * 2) / 2;\n        z = Math.round(absolutePosition.z * 2) / 2;\n\n        // the mesh position\n        mesh.parent = null; // mesh.setParent(null) !copies parent normals\n        mesh.setAbsolutePosition(new Vector3(x, y, z));\n\n        let positions = mesh.getVerticesData(VertexBuffer.PositionKind);\n        let normals = mesh.getVerticesData(VertexBuffer.NormalKind);\n        VertexData.ComputeNormals(positions, mesh.getIndices(), normals);\n        mesh.setVerticesData(VertexBuffer.NormalKind, normals);\n        // updateNormals(mesh, scene);\n        // mesh.updateMeshPositions(new Vector3(x,y,z), true)\n\n        return { ...cube, mesh, x, y, z };\n    });\n\n    updated.forEach(cube => {\n        matrix[cube.id] = { ...cube };\n    });\n\n    return updated;\n}\n\nfunction createPivot(scene) {\n    const origin = new Vector3(0, 0, 0);\n    const options = { diameter: 1, segments: 2 };\n    const pivot = MeshBuilder.CreateSphere('pivot', options, scene);\n\n    // the rotation parent hull\n    const mat = new StandardMaterial('origin', scene);\n    mat.wireframe = true;\n    pivot.material = mat;\n    pivot.visibility = false;\n    pivot.position = origin;\n    return pivot;\n}\n","function getFaceArray(dataset) {\n    const radius = getRadiusFromMatix(dataset);\n    const faces = {\n        x: [[], []],\n        y: [[], []],\n        z: [[], []]\n    };\n\n    [...dataset].forEach(row => {\n        const { x, y, z } = row;\n\n        // the negagive axes (eg x: -1) are index: 0\n        // the positive axes (eg. y: 1) are index: 1\n        if (Math.abs(x) === radius) faces.x[x < 0 ? 0 : 1].push(row);\n        if (Math.abs(y) === radius) faces.y[y < 0 ? 0 : 1].push(row);\n        if (Math.abs(z) === radius) faces.z[z < 0 ? 0 : 1].push(row);\n    });\n\n    return faces;\n}\n\nfunction getOwner(cube) {\n    // console.log(cube);\n    if(!cube || !cube.owner) return \"\";\n    return cube.owner\n}\n\nfunction getLattice(iterations, type, facet, radius, re, diameter) {\n    return iterations.map(i => {\n        return getFilter(radius, type, i).reduce(\n            (acc, c) =>\n                (re.test(getOwner(facet[c]))\n                    ? i && i < diameter - 1\n                        ? 1\n                        : 1\n                    : 0) + acc,\n            0\n        );\n    }); //?\n}\n\nfunction getDiagonals(re, facet, diameter, radius) {\n    return ['backslash', 'forwardslash'].map(type =>\n        getFilter(radius, type).reduce(\n            (acc, c) => (re.test(getOwner(facet[c])) ? 1 : 0) + acc,\n            0\n        ) === diameter\n            ? diameter\n            : 0\n    );\n}\n\nexport default getScore;\nfunction getScore(matrix, playerId) {\n    playerId = String(playerId);\n\n    const radius = getRadiusFromMatix(matrix);\n    const { x, y, z } = getFaceArray(matrix, playerId);\n\n    const re = new RegExp(`${playerId}`, 'i'); //?\n    const diameter = radius + 2; //?\n    const iterations = [...Array(diameter)].map((_, i) => i); //?\n\n    const xyz = [x, y, z].map(dimensions =>\n        dimensions.map(facet => {\n            //\n            const rows = getLattice(\n                iterations,\n                'row',\n                facet,\n                radius,\n                re,\n                diameter\n            );\n            const cols = getLattice(\n                iterations,\n                'col',\n                facet,\n                radius,\n                re,\n                diameter\n            );\n            const diags = getDiagonals(re, facet, diameter, radius);\n\n            return [...rows, ...cols, ...diags];\n        })\n    );\n\n    const occupied = [].concat(...xyz);\n    const subtotal = matrix.filter(row => re.test(row.owner)).map(() => 1)\n        .length;\n    const remainder = matrix.filter(row => row.type && !row.owner).length;\n\n    // the number of consecutive occupied cubes\n    const sets = occupied\n        .map(set => set.filter(values => (values === diameter ? 1 : 0)))\n        .map(a => a.length)\n        .reduce((a, c) => a + c, 0); //?\n\n    // does this player occupy an entire facet? (instant victory)\n    const dominance = occupied\n        .map(types => types.every(value => value >= diameter))\n        .filter(bool => bool).length;\n\n    const total = (subtotal + sets * diameter) * (dominance ? 2 : 1);\n    const finished = remainder === 0 || dominance > 0;\n    const stats = {\n        finished,\n        remainder,\n        dominance,\n        sets,\n        subtotal,\n        total\n    }; //?\n    const rank = scoreCard(playerId, stats);\n    stats.leader = rank[0];\n    stats.rank = rank;\n\n    return stats;\n}\n\nconst runningTotal = {};\nfunction scoreCard(playerId, object) {\n    runningTotal[playerId] = runningTotal[playerId] || { playerId };\n\n    let player = runningTotal[playerId];\n    let { accumulated = 0, current = 0 } = player;\n    current = object.total;\n    accumulated = accumulated + current;\n\n    runningTotal[playerId] = { playerId, accumulated, current };\n\n    const rank = Object.values(runningTotal).sort(\n        (a, b) => b.accumulated - a.accumulated\n    );\n\n    return rank;\n}\n\nfunction getRadiusFromMatix(matrix) {\n    const radius = Math.max.apply(null, matrix.map(r => r.x));\n    return Math.round(radius);\n}\n\nfunction getFilter(radius, type = 0, value = 0, negate = true) {\n    const diameter = radius + 2;\n    const sqr = diameter ** 2;\n\n    // returns the negated index OR remove output\n    const empty = n => (negate === true ? null : -n);\n\n    let array = [...Array(sqr)].map((_, i) => i);\n\n    let condition;\n    type = String(type).toLowerCase();\n\n    switch (type) {\n        case '0':\n        case 'col':\n        case 'column':\n        case 'vertical':\n            // columns (type: 1, value: column index)\n            condition = i => ((i % sqr) % diameter === value ? i : empty(i));\n            break;\n\n        case '1':\n        case 'row':\n        case 'horizontal':\n            // rows (type: 0, value: row index)\n            condition = i => ((i / diameter) >> 0 === value ? i : empty(i));\n            break;\n\n        case '2':\n        case 'descend':\n        case 'diagbck':\n        case 'backslash':\n            // diagonal -45' \\ (type: 1, value: NA)\n            value = 0;\n            condition = i => (i % (diameter + 1) === value ? i : empty(i));\n            break;\n\n        case '3':\n        case 'ascend':\n        case 'diagfwd':\n        case 'forwardslash':\n            // diagonal +45' / (type:1, value: NA)\n            value = diameter;\n            condition = i =>\n                ((i % sqr) % diameter) + 1 + ((i / diameter) >> 0) === value\n                    ? i\n                    : empty(i);\n            break;\n\n        default:\n            return null;\n    }\n\n    // remove all the \"null\" values, and return the relative indexes\n    // (setting negate = true, it will return the negative index value)\n    return array.map(condition).filter(index => index !== null);\n}\n\n/** QUOKKA TEST *!/\n// 0 1 2\n// 3 4 5\n// 6 7 8\n\n// 0 1 2 3\n// 4 5 6 7\n// 8 9 a b\n// c d e f\n\nimport gamedata from \"./game-c.json\";\n// import gamedata from \"./finished-game.json\";\n\ngetFilter(1, \"row\", 0, -1); //?\ngetFilter(1, \"col\", 0); //?\n\ngetFilter(2, \"row\", 0); //?\ngetFilter(2, \"col\", 0); //?\n\ngetFilter(1, \"forwardslash\"); //?\ngetFilter(2, \"backslash\"); //?\n\ngetScore(gamedata.matrix, 222); //?\ngetRadiusFromMatix(gamedata.matrix); //?.\n\n/***/\n","import { Vector3, Space } from 'babylonjs';\nimport BezierEasing from 'bezier-easing';\nimport { percentToAbsolute } from './utilities';\n\nexport default explodeMatrix;\nfunction explodeMatrix(\n    { scene, earth },\n    score,\n    multiplier = 0.18,\n    duration = 750\n) {\n    let players = {}; // playerId indexed dictionary\n    score.rank.forEach((p, i) => (players[p.playerId] = { ...p, rank: i }));\n    const winner = score.rank[0].playerId;\n\n    earth\n        .filter(cube => cube.owner || cube.owner === winner)\n        .map(cube => {\n            cube.mesh.displace = players[cube.owner].rank;\n            return cube.mesh;\n        })\n        .forEach(m => {\n            const { x, y, z } = m.absolutePosition;\n            const { displace } = m;\n\n            if (!displace) return;\n\n            // console.log('displace', m.id, displace, duration, multiplier);\n            animationStack(\n                scene,\n                m,\n                [x, y, z],\n                displace * multiplier,\n                duration\n            );\n        });\n}\n\nfunction animationStack(scene, mesh, xyz, distance, time) {\n    // var easing = BezierEasing(0.13, 0.69, 0.58, 1);\n    var easing = BezierEasing(0.25, 5, 0, 1);\n    const [x, y, z] = xyz;\n    const frames = 50;\n    const steps = (time / frames) >> 0;\n    const total = steps * frames;\n    const pos = new Vector3(x, y, z);\n    const absValue = percentToAbsolute();\n\n    // let lastFloat = 0;\n    let done = false;\n\n    for (let i = 0; i <= total; i += steps) {\n        let floatNormal = easing(i / total);\n\n        let value = absValue(distance, floatNormal);\n\n        // lastFloat = floatNormal;\n\n        setTimeout(() => mesh.translate(pos, value, Space.WORLD), i);\n\n        if (i >= total && !done) {\n            done = true;\n            const spin = rnd(5, 0.1) * 360; // larger is slower\n            const [x, y, z] = [rnd(2, -2), rnd(2, -2), rnd(2, -2)];\n            rotationLoop(scene, () => {\n                mesh.rotate(new Vector3(x, y, z), Math.PI / spin, Space.LOCAL);\n            });\n        }\n    }\n}\n\nfunction rotationLoop(scene, fn) {\n    scene.registerBeforeRender(fn);\n}\n\nfunction rnd(max, min = 0, float = true) {\n    const n = Math.random() * max + min;\n    return float ? n : n >> 0;\n}\n","import {StandardMaterial, MeshBuilder, Color3 } from 'babylonjs';\n\n\nexport default radialLineCluster;\nfunction radialLineCluster(scene) {\n    return pointCloud(scene);\n    // const lines = lineArray();\n    // const color = new Color3(0.07, 0.07, 0.07);\n    // MeshBuilder.CreateLineSystem('linesystem', {lines}, scene).color = color;\n\n    // lines.forEach(l => pinHead(l[1], scene, color));\n    // return lines;\n}\n\n// function pinHead(xyz, scene, color) {\n//     const m = MeshBuilder.CreateSphere(\n//         'dot',\n//         {diameter: 0.11, segments: 4},\n//         scene\n//     );\n//     const mat = new StandardMaterial('drkgrey', scene);\n//     mat.emissiveColor = color;\n//     mat.diffuseColor = new Color3.Black();\n//     mat.specularColor = new Color3.Black();\n\n//     m.setAbsolutePosition(xyz);\n//     m.material = mat;\n//     // m.material.wireframe = true;\n// }\n\n// function lineArray(n = 500) {\n//     let a = [];\n\n//     const e = 6;\n\n//     [...Array(n)]\n//         .map((_, i) => i)\n//         .forEach(_ => {\n//             const coords = getXYZ(e, e + 3).map(xyz => {\n//                 const [x, y, z] = xyz;\n//                 return new Vector3(x, y, z);\n//             });\n//             a.push(coords);\n//         });\n\n//     return a;\n// }\n\n// function getXYZ(min, max) {\n//     const {PI, random, sin, cos} = Math;\n//     const long = random() * PI;\n//     const lat = random() * (PI * 2);\n//     return [\n//         [\n//             min * sin(long) * cos(lat),\n//             min * sin(long) * sin(lat),\n//             min * cos(long)\n//         ],\n//         [\n//             (min + max) * sin(long) * cos(lat),\n//             (min + max) * sin(long) * sin(lat),\n//             (min + max) * cos(long)\n//         ]\n//     ];\n// }\n\nfunction pointCloud(scene) {\n    var sphere = MeshBuilder.CreateIcoSphere(\n        'sphere',\n        {radius: 10, segments: 128},\n        scene\n    );\n\n    let r, g, b;\n    r = g = b = 0.1050999;\n    var pointsMaterial = new StandardMaterial('Material', scene);\n    pointsMaterial.pointsCloud = true;\n    pointsMaterial.pointSize = 10;\n    pointsMaterial.diffuseColor = new Color3(r,g,b)\n    pointsMaterial.emissiveColor = new Color3(r,g,b)\n    sphere.material = pointsMaterial;\n}\n","import {\n    // Mesh,\n    // Color3,\n    PointLight,\n    // MeshBuilder,\n    Vector3,\n    Texture,\n    VolumetricLightScatteringPostProcess\n} from 'babylonjs';\n\nexport default createCoreMesh;\nfunction createCoreMesh({ engine, camera, scene }) {\n    // Create the \"God Rays\" effect (volumetric light scattering)\n\n    const createGodRays = false;\n    if(!createGodRays) return;\n\n    const core = scene.meshes.filter(mesh => mesh.isCore);\n    core.forEach(mesh => godRadiation(mesh, engine, camera, scene));\n}\n\nfunction godRadiation(mesh, engine, camera, scene) {\n\n    console.log(mesh);\n    var godrays = new VolumetricLightScatteringPostProcess(\n        'godrays',\n        1.0,\n        camera,\n        mesh,\n        100,\n        Texture.BILINEAR_SAMPLINGMODE,\n        engine,\n        false\n    );\n\n    // By default it uses a billboard to render the sun, \n    // just apply the desired texture position and scale\n\n    // godrays.mesh.material.diffuseTexture = new Texture(\n    //     'textures/sun.png',\n    //     scene,\n    //     true,\n    //     false,\n    //     Texture.BILINEAR_SAMPLINGMODE\n    // );\n    // godrays.mesh.material.diffuseTexture.hasAlpha = true;\n\n    godrays.useDiffuseColor = true;\n    godrays.mesh.position = new Vector3(0, 0, 0);\n    // godrays.mesh.scaling = new Vector3(.91, .91, .91);\n\n    var light = new PointLight(\"Omni\", new Vector3(0, 0, 0), scene);\n    light.position = godrays.mesh.position;\n\n}\n","export default gameState;\nfunction gameState(context) {\n    return { save: save.bind(context), load: load.bind(context) };\n}\n\nfunction save(key) {\n    // export state and matrix\n    let { state, earth } = this;\n    const matrix = [].concat(...earth).map(o => {\n        const shallow = { ...o };\n        delete shallow.mesh;\n        return shallow;\n    });\n\n    const json = {\n        state,\n        matrix\n    };\n\n    localStorage[key] = JSON.stringify(json, null, 4);\n}\n\nfunction load(object) {\n    if (typeof object === \"string\") {\n        object = localStorage[object] || object;\n        object = JSON.parse(object);\n    }\n\n    const occupy = this.occupy.bind(this);\n    let { state, matrix } = object;\n\n    // merge the JSON data into the existing terrain data\n    // and render the updated cube\n    this.state = { ...state };\n\n    const emulate = {};\n    this.state.players.forEach(p => (emulate[p.playerId] = p));\n\n    matrix = matrix.filter(o => o.owner);\n    matrix.forEach(row => {\n        const { id, owner } = row;\n        this.earth[id] = {\n            ...this.earth[id],\n            ...row\n        };\n\n        occupy.call(this, `m${id}`, emulate[owner]);\n    }, this);\n\n    console.log(this.state)\n    this.generateScene();\n    this.setState({ts: new Date().valueOf()});\n}\n","import {rnd} from './utilities';\n\nexport default getRandomRotation;\nfunction getRandomRotation(radius) {\n    const rotation = ['x', 'y', 'z'][rnd(2, 0, false)];\n    const extent = Math.round((rnd(radius * 2, 0) - radius) * 2) / 2;\n    const amount = [-1, 1][rnd(1, 0, false)];\n\n    return {rotation, extent, amount};\n}\n","import * as React from 'react';\n\nexport default Player;\nfunction Player({ player, current }) {\n    let { alias, material, twist } = player;\n\n    const style = { background: material };\n    // const free = null;\n    // spiecies = ['human', 'random', 'AI'][spiecies];\n\n    // const showTwist = twist ? (\n    //     <div className=\"ui-player-twist\">twist: {twist || 'none'}</div>\n    // ) : null;\n\n    // const showFree =\n    //     free !== null ? (\n    //         <div className=\"ui-player-free\">Free: {free || 'none'}</div>\n    //     ) : null;\n\n    const active = current ? 'ui-player-current' : '';\n    const classname = `ui-player ${active}`;\n\n    const showAlias = (\n        <div className=\"ui-player-info\">\n            {alias} ({twist})\n        </div>\n    );\n\n    return (\n        <div className={classname}>\n            <div className=\"ui-player-icon\" style={style}>\n                {showAlias}\n            </div>\n        </div>\n    );\n}\n","export default [\n    'Agent Smith',\n    'Alex Delarge',\n    'Amon Goeth',\n    'Annie Wilkes',\n    'Anton Chigurh',\n    'Bane',\n    'Bellatrix Lestrange',\n    'Biff Tannen',\n    'Boba Fett',\n    'Buffalo Bill',\n    'Captain Hook',\n    'Chucky',\n    'Commodus',\n    'Count Dooku',\n    'Count Dracula',\n    'Cruella de Vil',\n    'Darth Maul',\n    'Darth Vader',\n    'Davy Jones',\n    'Doctor Octopus',\n    'Dolores Umbridge',\n    'Dracula',\n    'Dr. Evil',\n    'Frankenstien',\n    'Freddy Krueger',\n    'Ghostface',\n    'Gollum',\n    'HAL 9000',\n    'Hades',\n    'Hannibal Lecter',\n    'Hans Gruber',\n    'Hans Landa',\n    'Harvey Dent',\n    'Jabba the Hutt',\n    'Jack Torrance',\n    'Jafar',\n    'Jason Voorhees',\n    'Jigsaw',\n    'John Doe',\n    'Joker',\n    'Keyser Söze',\n    'Khan',\n    'Leatherface',\n    'Loki',\n    'Lord Voldemort',\n    'Magneto',\n    'Maleficent',\n    'Michael Corleone',\n    'Michael Myers',\n    'Nosferatu',\n    'Norman Bates',\n    'Nurse Ratched',\n    'Palpatine',\n    'Patrick Bateman',\n    'Pennywise',\n    'Pinhead',\n    'President Snow',\n    'Professor Moriarty',\n    \"Ra's al Ghul\",\n    'Saruman',\n    'Sauron',\n    'Scar',\n    'Scarecrow',\n    'T-1000',\n    'Terminator',\n    'Thanos',\n    'The Penguin',\n    'Tommy DeVito',\n    'Tyler Durden',\n    'Ultron',\n    'Vito Corleone',\n    'Xenomorph',\n    'Yautja'\n];\n","import antagonist from './bad-guys';\nimport { rnd, uuid } from './utilities';\n\nlet serialno = 0;\nlet history = [];\n\nconst materialKeys = ['black', 'white', 'red', 'grey'];\n\nexport default createPlayer;\nfunction createPlayer(name, human) {\n    const playerId = uuid('p');\n    const material = getNextMaterial();\n    const spiecies = human ? 0 : 1;\n    const alias = name || getRandomName();\n\n    return {\n        material,\n        playerId,\n        twist: 0,\n        alias,\n        spiecies\n    };\n}\n\nfunction getRandomName() {\n    // filter used names\n    const past = antagonist.length / 4 >> 0;\n    const names = antagonist.filter(v => !(history.indexOf(v)+1));\n    const n = names.length - 1;\n    const text = names[rnd(n, 0, false)];\n\n    // only remember the past 18 used names\n    history.push(text);\n    history = history.slice(-past);\n\n    return text;\n}\n\nfunction getNextMaterial() {\n    let n = materialKeys.length;\n    let color = materialKeys[serialno % n];\n    serialno += 1;\n    return color;\n}\n\n\ngetRandomName(); //?","import * as React from 'react';\nimport createPlayer from './createPlayer';\n\nclass Settings extends React.Component {\n    constructor({ state, saveSettings }) {\n        super();\n\n        console.log('>>>>', state);\n\n        this.state = {\n            radius: 1,\n            opponents: 2,\n            nonhuman: 1,\n            max: null,\n            players: null\n        };\n\n        this.state.max = this.state.opponents;\n        this.state.players = [0, 1, 2, 3].map(n => {\n            let ishuman =\n                this.state.opponents > this.state.nonhuman &&\n                this.state.opponents - this.state.nonhuman - n > 0\n                    ? 0\n                    : 1;\n            return createPlayer(null, ishuman === 0);\n        });\n    }\n\n    handleSave = () => {\n        let { radius, players, opponents } = this.state;\n        const settings = {\n            radius,\n            players: players.slice(0, opponents)\n        };\n        this.props.saveSettings(settings);\n    };\n\n    handleNons = e => {\n        let value = Number(e.target.value);\n        let { max } = this.state;\n        value = Math.min(value, max);\n\n        // update player spiecies\n        let { players, opponents } = this.state;\n        players = players.map((p, i) => {\n            let ishuman =\n                opponents > value && opponents - value - i > 0 ? 0 : 1;\n\n            p.spiecies = ishuman;\n            return p;\n        });\n\n        this.setState({ nonhuman: value, players });\n    };\n    handleRadius = e => {\n        const radius = Number(e.target.value);\n        this.setState({ radius });\n    };\n    handleRadiusChange = e => {\n        const radius = Number(e.target.value);\n        this.props.updateEarth(radius);\n    };\n    handlePlayers = e => {\n        let { nonhuman } = this.state;\n        const opponents = Number(e.target.value);\n        if (nonhuman > opponents) nonhuman = opponents;\n        this.setState({ opponents, max: opponents, nonhuman });\n    };\n\n    updatePlayername = (index, text) => {\n        const { players } = this.state;\n        players[index].alias = text;\n        // players[index].spiecies = index + 1 < nonhuman ? 1 : 0;\n        this.setState({ players });\n    };\n\n    render() {\n        if (!this.props.state.showSettings) return null;\n\n        const { radius } = this.state;\n        const text = `${radius + 2}x${radius + 2}`;\n        const playerslist = this.state.players.map((user, i) => {\n            let { opponents } = this.state;\n            let { alias, playerId, spiecies, material } = user;\n\n            if (i + 1 > opponents) return null;\n\n            return (\n                <PlayerName\n                    key={i}\n                    playerId={playerId}\n                    material={material}\n                    handler={text => this.updatePlayername(i, text)}\n                    alias={alias}\n                    spiecies={spiecies}\n                />\n            );\n        }, this);\n\n        return (\n            <div className=\"ui\">\n                <div className=\"ui-settings\">\n                    <h2>Game settings</h2>\n                    <Range\n                        key=\"radius\"\n                        min=\"1\"\n                        max=\"4\"\n                        label=\"Matrix size\"\n                        value={this.state.radius}\n                        text={text}\n                        handler={this.handleRadius}\n                        handleChange={this.handleRadiusChange}\n                    />\n                    <Range\n                        key=\"opponents\"\n                        min=\"2\"\n                        max=\"4\"\n                        label=\"Opponents\"\n                        value={this.state.opponents}\n                        handler={this.handlePlayers}\n                    />\n                    <Range\n                        key=\"nonhuman\"\n                        min=\"0\"\n                        max={this.state.max}\n                        label=\"Non-human\"\n                        value={this.state.nonhuman}\n                        handler={this.handleNons}\n                    />\n                    <div className=\"ui-players\">{playerslist}</div>\n                    <div className=\"ui-cta-primary\" onClick={this.handleSave}>\n                        PLAY\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Settings;\n\nfunction Range({\n    value,\n    text = null,\n    label = null,\n    min,\n    max,\n    handler,\n    handleChange\n}) {\n    handleChange = handleChange || function() {};\n    return (\n        <div className=\"ui-settings-range\">\n            <div className=\"ui-input-row\">\n                <span className=\"ui-input-label\"> {label || ''}</span>\n                <span className=\"ui-input-text\"> {text || value}</span>\n            </div>\n            <input\n                className=\"ui-input-range\"\n                type=\"range\"\n                min={min}\n                max={max}\n                defaultValue={value}\n                onInput={handler}\n                onChange={handleChange}\n            />\n        </div>\n    );\n}\n\nfunction PlayerName({ alias, spiecies, material, handler }) {\n    spiecies = spiecies === 0 ? 'human' : 'random';\n    const css = { background: material };\n    return (\n        <span className=\"ui-player-card\" style={css}>\n            <div className=\"ui-player-name\">\n                <textarea\n                    placeholder=\"Your player name\"\n                    type=\"text\"\n                    value={alias}\n                    onChange={e => handler(e.target.value)}\n                />\n            </div>\n            <div className=\"ui-player-spiecies\">{spiecies}</div>\n        </span>\n    );\n}\n\n","import React from 'react';\n\nexport default GameOver;\n\nfunction GameOver({ finished, players, handleRestart }) {\n    if (!finished) return null;\n\n    const { count, rank } = getResults(players);\n    const scoreCard = rank.map(item => {\n        const { alias, accumulated, material, playerId } = item;\n        return (\n            <div key={playerId} className=\"ui-score-row\">\n                <span className=\"ui-score-col ui-score-avatar\">{material}</span>\n                <span className=\"ui-score-col ui-score-alias\">{alias}</span>\n                <span className=\"ui-score-col ui-score-points\">\n                    {accumulated}\n                </span>\n            </div>\n        );\n    });\n\n    const tie = count > 1;\n    const { alias } = rank[0];\n    const winner = tie ? 'Nobody wins!' : `${alias} wins!`;\n\n    return (\n        <div className=\"ui-status-game-over\">\n            <div className=\"ui-game-over-stats\">\n                <div className=\"ui-heading\">Game Over</div>\n                <div className=\"ui-subheading\">{winner}</div>\n                {scoreCard}\n                <div className=\"ui-restart\">\n                    <span className=\"ui-cta-primary\" onClick={handleRestart}>\n                        RESTART\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nfunction getResults(players) {\n    const rank = players.sort((a, b) => b.accumulated - a.accumulated);\n\n    // is this a tied games?\n    const topscore = rank[0].accumulated;\n    const count = rank.filter(p => p.accumulated === topscore).length;\n\n    console.log('winners', topscore, count);\n\n    return { count, rank };\n}\n","import React from 'react';\n\nexport default HexSwatches;\n\nfunction HexSwatches({ earth }) {\n    if (!earth) return null;\n    const hexes = earth\n        .filter(c => c.type)\n        .map((o, i) => {\n            const { hexColor } = o.mesh.material;\n            const bgcolor = { background: hexColor };\n            return (\n                <span className=\"swatch\" key={'hx' + i} style={bgcolor}></span>\n            );\n        });\n\n    return <div className=\"ui-terrain\">{hexes}</div>;\n}\n","import React from 'react';\n\nexport default CurrentPlayer;\n\nfunction CurrentPlayer({ state, array }) {\n    if (!state.inProgress || state.finished) return null;\n\n    const { player, players } = state;\n    const current = players[player];\n    const { alias, twist, material } = current;\n\n    return (\n        <div className=\"ui-status-current-player\">\n            <div className=\"ui-current\">\n                <div className=\"ui-player-label\">\n                    <div\n                        className=\"ui-current-avatar\"\n                        style={{ background: material }}></div>\n                    <div className=\"ui-current-player\">{alias}</div>\n                </div>\n            </div>\n            <div className=\"ui-status-icons\">\n                <div className=\"ui-status-cell\">\n                    {twist}{' '}\n                    <img\n                        className=\"ui-icon\"\n                        src=\"/images/icons/twists.svg\"\n                        alt=\"twist\"\n                    />\n                </div>\n                <div className=\"ui-status-cell\">\n                    {current.accumulated || 0}{' '}\n                    <img\n                        className=\"ui-icon\"\n                        src=\"/images/icons/score.svg\"\n                        alt=\"score\"\n                    />\n                </div>\n                <div className=\"ui-status-cell\">\n                    {array && array.length}{' '}\n                    <img\n                        className=\"ui-icon\"\n                        src=\"/images/icons/square.svg\"\n                        alt=\"free squares\"\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n","import * as React from 'react';\n\nexport default Introduction;\nfunction Introduction({ state }) {\n    if (!state.showIntro) return null;\n\n    return (\n        <div className=\"ui-intro-instructions\">\n            <p>Familiar lattice game in 3D</p>\n\n            <h2>How to play</h2>\n            <p>double tap to occupy a cube</p>\n            <p>tap+drag on a cube to rotate accross a plane</p>\n            <p>tap+drag on the canvas to orbit the matrix</p>\n\n            <h2>Conditions of victory</h2>\n            <p>Score is awarded by occupying a sequential set of territories</p>\n            <p>Each territory occupied gives you 2 opportunites to twist</p>\n            <p>Occupy and entire face will cause immediate victory</p>\n        </div>\n    );\n}\n","import React from 'react';\nimport GameOver from './GameOver';\nimport HexSwatches from './HexSwatches';\nimport CurrentPlayer from './CurrentPlayer';\nimport Introduction from './Introduction';\n\nexport default Status;\nfunction Status({ state, earth, handleRestart }) {\n    const { finished, players } = state;\n    const array = !earth ? null : earth.filter(c => !c.owner && c.type);\n\n    return (\n        <div className=\"ui-status\">\n            <Introduction state={state} />\n            <CurrentPlayer state={state} array={array} />\n            <GameOver\n                finished={finished}\n                players={players}\n                handleRestart={handleRestart}\n            />\n            <HexSwatches state={state} earth={earth} />\n        </div>\n    );\n}\n","import * as React from 'react';\nimport { Color3, Vector3 } from 'babylonjs';\nimport Canvas from './Canvas';\n\nimport { rnd } from './utilities';\nimport materials from './materials';\nimport createCamera from './createCamera';\nimport createLight from './createLight';\nimport getMatrix from './getMatrix';\nimport showSceneAxis from './showAxis';\nimport pointerEvents from './pointerEvents';\nimport rotatePlane from './rotatePlane';\nimport getScore from './calculateScore';\nimport explodeMatrix from './explodeMatrix';\nimport radialLineCluster from './radialLineCluster';\nimport createCoreMesh from './createCoreMesh';\nimport gameState from './gameState';\nimport getRandomRotation from './getRandomRotation';\n\nimport Player from './Player';\nimport Settings from './Settings';\nimport Status from './Status';\n\nimport './ui.css';\n\nclass Scene extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            showAxis: false,\n            // showIntro: true,\n            showSettings: true,\n            playDelay: 550, // non-human turn delay\n            rotationFrames: 50, // milseconds of animation\n            focusOnOccupy: true, // move camera to occupaion cube\n            twistsPerPlay: 2,\n            toggleOnDoubleTap: true,\n            showCubeCoords: false,\n\n            inProgress: false,\n            finished: false,\n\n            radius: 1,\n            player: 0,\n            players: null\n        };\n\n        // zero state players (for intro)\n        // TODO a better temp player simulator\n        this.state.players = [\n            {\n                material: 'black',\n                playerId: '111',\n                twist: 0,\n                alias: 'Jack Black',\n                spiecies: 1\n            },\n            {\n                material: 'white',\n                playerId: '222',\n                twist: 0,\n                alias: 'Walter White',\n                spiecies: 1\n            }\n        ];\n\n        console.log('initial radius', this.state.radius);\n        this.toggleToNextPlayer.bind(this);\n    }\n\n    executeNonHumanPlayer = (player, ms = 0) => {\n        // this.setState({ player });\n\n        const { earth, rotate, executeNonHumanPlayer, occupy } = this;\n        // const diameter = radius + 2;\n        const array = earth.filter(c => !c.owner && c.type);\n        const cube = array[rnd(array.length - 1, 0, false)];\n        const { players, playDelay, radius } = this.state;\n        const currentPlayer = players[player];\n\n        // with the non-human occupy OR twist 33% chance of twist\n        const willTwist = currentPlayer.twist\n            ? rnd(9, 0, false) % 3 === 0\n            : false;\n\n        let totalDelay = willTwist ? playDelay + ms : 50;\n\n        setTimeout(function() {\n            if (willTwist) {\n                rotate(getRandomRotation(radius));\n                executeNonHumanPlayer(player, ms + 150);\n                return;\n            }\n\n            // turn always ends with \"occupy\"\n            occupy(cube.mesh.id);\n        }, totalDelay);\n    };\n\n    rotate = ({ rotation, extent, amount }) => {\n        const { scene, earth } = this;\n        const { player, players, rotationFrames } = this.state;\n        const currentPlayer = players[player];\n\n        if (!currentPlayer.twist) return;\n\n        let maxAmount = Math.min(currentPlayer.twist, Math.abs(amount));\n        maxAmount = maxAmount * amount > 0 ? 1 : -1; // preserve the sign\n\n        rotatePlane(scene, earth, rotation, extent, maxAmount, rotationFrames);\n\n        currentPlayer.twist -= 1;\n        // this.setState({ players });\n    };\n\n    toggleToNextPlayer = () => {\n        if (!this.state.toggleOnDoubleTap) return;\n\n        let { player, players, playDelay } = this.state;\n        const { executeNonHumanPlayer } = this;\n        player = (player + 1) % players.length;\n        const nextPlayer = players[player];\n        const bgcolor = nextPlayer.material;\n\n        console.log(\n            '%c%s',\n            `background: ${bgcolor}; color: #666; padding: 3px;`,\n            nextPlayer.alias,\n            nextPlayer.alias,\n            nextPlayer.spiecies\n        );\n\n        this.setState({ player });\n        if (nextPlayer.spiecies) {\n            // delay to prevent multiple rotations\n            return setTimeout(function() {\n                executeNonHumanPlayer(player);\n            }, playDelay);\n        }\n    };\n\n    getCurrentPlayer() {\n        let { player, players } = this.state;\n        return players[player];\n    }\n\n    updateScore() {\n        const { earth } = this;\n        let { finished, players } = this.state;\n\n        if (!earth || finished) return null;\n\n        const { playerId } = this.getCurrentPlayer();\n        const score = getScore(earth, playerId);\n\n        score.rank.forEach(item => {\n            // updated state player score\n            const index = players.findIndex(\n                row => row.playerId === item.playerId\n            );\n            if (index < 0) {\n                console.warn(\"can't find playerId\", item.playerId);\n                return;\n            }\n            players[index].accumulated = item.accumulated;\n        });\n\n        finished = score.finished === true;\n        this.setState({ players, finished });\n        return score;\n    }\n\n    occupy = (id, emulate = null) => {\n        const {\n            player,\n            players,\n            finished,\n            twistsPerPlay,\n            showCubeCoords\n        } = this.state;\n\n        if (finished) {\n            alert('The game is over');\n            return;\n        }\n\n        const index = id.replace(/^m/i, '');\n        const cube = this.earth[index];\n\n        if (emulate === null && cube.owner) {\n            console.warn('already occupied', id, emulate);\n            return;\n        }\n\n        const m = materials(this);\n        let currentPlayer = emulate === null ? players[player] : emulate;\n        const playerMaterial = currentPlayer.material;\n        const { playerId } = currentPlayer;\n        const { x, y, z, axis } = cube;\n        const scaleUpBy = 1.165; // upsize cube\n\n        cube.owner = currentPlayer.playerId;\n\n        if (showCubeCoords) {\n            const coord = [x, y, z].join(',');\n            const hash = axis ? '#' : '';\n            cube.mesh.material = m(playerMaterial, `${id}(${coord})${hash}`);\n        }\n        cube.mesh.material = m(playerMaterial); //, `${id}(${coord})${hash}`);\n        cube.mesh.scaling = new Vector3(scaleUpBy, scaleUpBy, scaleUpBy);\n\n        console.log('Occupy', playerId, id, cube);\n\n        // if game data is importing do not toggle to next player\n        if (emulate !== null) return;\n\n        currentPlayer.twist += twistsPerPlay;\n\n        // does the game continue?\n        const score = this.updateScore();\n        if (!score.finished) {\n            this.toggleToNextPlayer();\n        } else {\n            explodeMatrix({ scene: this.scene, earth: this.earth }, score);\n        }\n    };\n\n    sceneDidMount = e => {\n        this.scene = e.scene;\n        this.canvas = e.canvas;\n        this.engine = e.engine;\n\n        const { radius } = this.state;\n        // this.camera = createCamera(e, (radius + 1) * 3.6);\n        this.camera = createCamera(e, this);\n        this.earth = getMatrix(e, radius);\n        this.generateScene = generateScene.bind(this);\n\n        window.earth = this.earth;\n        return generateScene.call(this);\n    };\n\n    getCurrentPlayerInfo() {\n        // render all contestants\n\n        const { players, player } = this.state;\n\n        return players.map((obj, n) => (\n            <Player key={n} player={obj} current={n === player} />\n        ));\n    }\n\n    saveSettings = settings => {\n        const { radius, players } = settings;\n        const next = {\n            ...this.state,\n            radius,\n            players,\n            finished: false,\n            inProgress: true\n        };\n\n        this.setState(next, () => this.saveAndStart(players, radius));\n    };\n\n    updateEarth = radius => {\n        console.log('re-generate earth matrix', radius);\n        const scene = this.scene;\n        this.earth = getMatrix({ scene }, radius);\n        window.earth = this.earth;\n    };\n\n    render() {\n        const opts = {};\n        const { earth, state } = this;\n\n        return (\n            <div className=\"ui-container\">\n                <div className=\"ui-branding\">FLIPTOPBOX</div>\n                <Status\n                    state={state}\n                    earth={earth}\n                    handleRestart={this.restart.bind(this)}\n                />\n                <Settings\n                    state={state}\n                    saveSettings={this.saveSettings}\n                    updateEarth={this.updateEarth}\n                />\n                <Canvas sceneDidMount={this.sceneDidMount} opts={opts} />;\n            </div>\n        );\n    }\n\n    restart() {\n        console.log('Restart');\n        let { players, radius } = this.state;\n\n        // reset the accumulated score and twist\n        players = players.map(p => {\n            p.twist = 0;\n            p.accumulated = 0;\n            return p;\n        });\n\n        // re-generate the earth\n        this.updateEarth(radius);\n\n        this.setState({\n            showSettings: true,\n            showIntro: false,\n            inProgress: false,\n            finished: false,\n            players\n        });\n    }\n\n    saveAndStart(players, radius) {\n        const next = {\n            ...this.setState,\n            showSettings: false,\n            showIntro: false,\n            inProgress: true,\n            radius,\n            players\n        };\n        this.setState(next, () => {\n            window.camera.start(1200);\n            const humans = players.reduce(\n                (a, c) => a + (c.spiecies === 0 ? 1 : 0),\n                0\n            );\n            if (!humans) this.executeNonHumanPlayer(0);\n        });\n    }\n}\n\nexport default Scene;\n\nfunction generateScene() {\n    // const that = this;\n    // const { scene, canvas, engine } = e;\n    let { scene, engine, camera, earth } = this;\n    const { radius, showAxis } = this.state;\n\n    engine.runRenderLoop(() => scene && scene.render());\n\n    showSceneAxis((radius + 1) * 3, scene, showAxis);\n    createLight(\n        { scene },\n        'hemi',\n        'sun',\n        0.25,\n        [0.6, 0.7, 0.7],\n        [0.5, 0.5, 0.5]\n    );\n    createLight({ scene }, 'point', 'point1', 0.4, [0, 6, -1]);\n    createLight({ scene }, 'point', 'core1', 1.4, [0, 0, 0]);\n\n    scene.clearColor = new Color3(0.1, 0.1, 0.1);\n    scene.onPointerObservable.add(pointerEvents.bind(this));\n\n    this.setState({ ready: true });\n\n    radialLineCluster(scene);\n    createCoreMesh({ scene, engine, camera, earth });\n\n    window.gameState = gameState(this);\n}\n","import React from 'react';\nimport './App.css';\n\n// import logo from './logo.svg';\n// import scene from './scene';\n\n\nimport Scene from './Scene';\n\nfunction App() {\n    return <Scene />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}